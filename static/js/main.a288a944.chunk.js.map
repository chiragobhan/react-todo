{"version":3,"sources":["MyToDoComponent.js","index.js"],"names":["MyToDoComponent","props","state","pendingTaskList","completedTaskList","task","handleTaskTyping","bind","addItemToTask","markDone","event","this","setState","target","value","taskValue","currentTaskList","push","pendingTaskListCopy","completedTaskListCopy","i","length","splice","style","display","margin","type","placeholder","onChange","onClick","map","checked","padding","textDecorationLine","textDecorationStyle","React","Component","ReactDOM","render","document","getElementById"],"mappings":"2KAgGeA,E,kDA7FX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,gBAAiB,GACjBC,kBAAmB,GACnBC,KAAM,IAEV,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBATD,E,6DAYFG,GACbC,KAAKC,SAAS,CAAEP,KAAMK,EAAMG,OAAOC,U,sCAInC,IAAIC,EAAYJ,KAAKT,MAAMG,KACvBW,EAAkBL,KAAKT,MAAMC,gBACjCa,EAAgBC,KAAKF,GACrBJ,KAAKC,SAAS,CACVP,KAAM,GACNF,gBAAiBa,M,+BAIhBX,GAGL,IAFA,IAAIa,EAAsBP,KAAKT,MAAMC,gBACjCgB,EAAwBR,KAAKT,MAAME,kBAC9BgB,EAAI,EAAGA,EAAIF,EAAoBG,OAAQD,IAC5C,GAAIF,EAAoBE,KAAOf,EAAM,CACjCa,EAAoBI,OAAOF,EAAG,GAC9B,MAGRD,EAAsBF,KAAKZ,GAC3BM,KAAKC,SAAS,CACVT,gBAAiBe,EACjBd,kBAAmBe,M,+BAIjB,IAAD,OACL,OAEI,yBAAKI,MAAO,CACRC,QAAS,QACTC,OAAQ,WAER,2CACA,2BAAOC,KAAK,OAAOC,YAAY,eAAeb,MAAOH,KAAKT,MAAMG,KAAMuB,SAAUjB,KAAKL,mBACrF,4BAAQuB,QAASlB,KAAKH,eAAtB,OACCG,KAAKT,MAAMC,gBAAgBkB,OAAS,EAAI,8CAA0B,KACnE,4BACI,+BACI,+BAEQV,KAAKT,MAAMC,gBAAgB2B,KAAI,SAACzB,GAAD,OAC3B,4BACI,4BAAI,4BAAI,2BAAOqB,KAAK,WAAWK,SAAS,EAAOF,QAAS,kBAAM,EAAKpB,SAASJ,QAC5E,wBAAIkB,MAAO,CAAES,QAAS,QAAU3B,UASvDM,KAAKT,MAAME,kBAAkBiB,OAAS,EAAI,gDAA4B,KACvE,4BACI,+BACI,+BAEQV,KAAKT,MAAME,kBAAkB0B,KAAI,SAACzB,GAAD,OAC7B,4BACI,wBAAIkB,MAAO,CACPS,QAAS,MAAOC,mBAAoB,eACpCC,oBAAqB,UAErB,4BAAK7B,gB,GAjFnB8B,IAAMC,WCEpCC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.a288a944.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass MyToDoComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pendingTaskList: [],\r\n            completedTaskList: [],\r\n            task: ''\r\n        }\r\n        this.handleTaskTyping = this.handleTaskTyping.bind(this);\r\n        this.addItemToTask = this.addItemToTask.bind(this);\r\n        this.markDone = this.markDone.bind(this);\r\n    }\r\n\r\n    handleTaskTyping(event) {\r\n        this.setState({ task: event.target.value });\r\n    }\r\n\r\n    addItemToTask() {\r\n        let taskValue = this.state.task;\r\n        let currentTaskList = this.state.pendingTaskList;\r\n        currentTaskList.push(taskValue);\r\n        this.setState({\r\n            task: '',\r\n            pendingTaskList: currentTaskList\r\n        });\r\n    }\r\n\r\n    markDone(task) {\r\n        let pendingTaskListCopy = this.state.pendingTaskList;\r\n        let completedTaskListCopy = this.state.completedTaskList;\r\n        for (let i = 0; i < pendingTaskListCopy.length; i++) {\r\n            if (pendingTaskListCopy[i] === task) {\r\n                pendingTaskListCopy.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        completedTaskListCopy.push(task);\r\n        this.setState({\r\n            pendingTaskList: pendingTaskListCopy,\r\n            completedTaskList: completedTaskListCopy\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            /* Creating a div element which will center align all its child elements */\r\n            <div style={{\r\n                display: 'table',\r\n                margin: '0 auto'\r\n            }}>\r\n                <h1>My ToDo App</h1>\r\n                <input type=\"text\" placeholder=\"Enter a task\" value={this.state.task} onChange={this.handleTaskTyping} />\r\n                <button onClick={this.addItemToTask}>Add</button>\r\n                {this.state.pendingTaskList.length > 0 ? <h3>Pending Tasks:</h3> : null}\r\n                <ul>\r\n                    <table>\r\n                        <tbody>\r\n                            {\r\n                                this.state.pendingTaskList.map((task) =>\r\n                                    <tr>\r\n                                        <td><li><input type=\"checkbox\" checked={false} onClick={() => this.markDone(task)} /></li></td>\r\n                                        <td style={{ padding: '5px' }}>{task}</td>\r\n                                        {/* A button can also be used instead of a checkbox */}\r\n                                        {/* <td><button onClick={() => this.markDone(task)}>Done</button></td> */}\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </ul>\r\n                {this.state.completedTaskList.length > 0 ? <h3>Completed Tasks:</h3> : null}\r\n                <ul>\r\n                    <table>\r\n                        <tbody>\r\n                            {\r\n                                this.state.completedTaskList.map((task) =>\r\n                                    <tr>\r\n                                        <td style={{\r\n                                            padding: '5px', textDecorationLine: 'line-through',\r\n                                            textDecorationStyle: 'solid'\r\n                                        }}>\r\n                                            <li>{task}</li>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MyToDoComponent;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport MyToDoComponent from './MyToDoComponent';\r\n\r\nReactDOM.render(\r\n    <MyToDoComponent/>,\r\n    document.getElementById('root')\r\n  );"],"sourceRoot":""}